#!/usr/bin/env python3
"""
Script de prueba para verificar que el deployment funcione correctamente
"""

import sys
import os

# Agregar el directorio de m√≥dulos al path
sys.path.append(os.path.join(os.path.dirname(__file__), 'modules'))

def test_import_modules():
    """Prueba que todos los m√≥dulos se puedan importar correctamente"""
    print("üß™ Probando importaci√≥n de m√≥dulos...")
    
    try:
        # Probar importaciones b√°sicas
        from modules.suma import sumar
        from modules.resta import restar
        from modules.multiplicacion import multiplicar
        from modules.division import dividir
        from modules.avanzadas import raiz_cuadrada, factorial
        print("‚úÖ M√≥dulos matem√°ticos importados correctamente")
        
        # Probar importaci√≥n de la interfaz CLI
        from modules.interfaz import Calculadora
        print("‚úÖ Interfaz CLI importada correctamente")
        
        # Probar importaci√≥n condicional de GUI
        try:
            from modules.interfaz_grafica import CalculadoraGUI
            print("‚úÖ Interfaz gr√°fica disponible")
        except ImportError:
            print("‚ö†Ô∏è Interfaz gr√°fica no disponible (normal en contenedores)")
        
    except ImportError as e:
        print(f"‚ùå Error importando m√≥dulos: {e}")
        return False
    
    return True

def test_app_import():
    """Prueba que la aplicaci√≥n Flask se pueda importar"""
    print("\nüß™ Probando importaci√≥n de la aplicaci√≥n Flask...")
    
    try:
        from app import app
        print("‚úÖ Aplicaci√≥n Flask importada correctamente")
        print(f"‚úÖ Nombre de la app: {app.name}")
        return True
    except ImportError as e:
        print(f"‚ùå Error importando la aplicaci√≥n Flask: {e}")
        return False

def test_basic_calculations():
    """Prueba c√°lculos b√°sicos"""
    print("\nüß™ Probando c√°lculos b√°sicos...")
    
    try:
        from modules.suma import sumar
        from modules.multiplicacion import multiplicar
        from modules.avanzadas import raiz_cuadrada
        
        # Probar operaciones
        assert sumar(2, 3) == 5
        assert multiplicar(4, 5) == 20
        assert raiz_cuadrada(16) == 4.0
        
        print("‚úÖ C√°lculos b√°sicos funcionando correctamente")
        return True
    except Exception as e:
        print(f"‚ùå Error en c√°lculos b√°sicos: {e}")
        return False

def test_flask_routes():
    """Prueba que las rutas de Flask funcionen"""
    print("\nüß™ Probando rutas de Flask...")
    
    try:
        from app import app
        
        with app.test_client() as client:
            # Probar ruta principal
            response = client.get('/')
            assert response.status_code == 200
            print("‚úÖ Ruta principal (/) funciona")
            
            # Probar API de c√°lculo
            response = client.post('/api/calculate', 
                                 json={'operation': 'basic', 'num1': 5, 'num2': 3, 'operator': '+'})
            assert response.status_code == 200
            data = response.get_json()
            assert data['result'] == 8
            print("‚úÖ API de c√°lculo funciona")
            
        return True
    except Exception as e:
        print(f"‚ùå Error en rutas de Flask: {e}")
        return False

def main():
    """Funci√≥n principal"""
    print("üöÄ Iniciando pruebas de deployment...\n")
    
    tests = [
        test_import_modules,
        test_app_import,
        test_basic_calculations,
        test_flask_routes
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        if test():
            passed += 1
    
    print(f"\nüìä Resultados: {passed}/{total} pruebas pasaron")
    
    if passed == total:
        print("üéâ ¬°Todas las pruebas pasaron! El proyecto est√° listo para deployment.")
        sys.exit(0)
    else:
        print("‚ùå Algunas pruebas fallaron. Revisar los errores antes del deployment.")
        sys.exit(1)

if __name__ == "__main__":
    main()
